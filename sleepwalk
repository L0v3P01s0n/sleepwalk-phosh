#!/bin/bash

SLEEP_STEP=30
SLEEP_SECS_INIT=$SLEEP_STEP
SLEEP_SECS=$SLEEP_SECS_INIT
SLEEP_MAX_SECS=600
WAKE_SECS=30
LOCK_DIR="/tmp/sleepwalk"
IS_NOTIFICATION=0
NOTIFICATION_FILE="/tmp/sleepwalk-notify"
USERNAME="lovepoison"
SLEEPCHARGE="0"
NO_MODEM="0"
SLEEP_CHECK="0"


sleepcharge() {

if [ "$SLEEPCHARGE" == "0" ]; then
	if [ "$(cat /sys/class/power_supply/bq27411-0/status)" == "Charging" ]; then
		return 1
	else
		return 0
	fi

else

	return 0

fi

}


modem-check(){

if [ "$(mmcli -m any --voice-list-calls | grep 'freedesktop')" != "" ]; then
        if [ "$NO_MODEM" == "1" ]; then
                return 0
        else
                return 1
	fi
else
        return 0
fi

}


start_deep_sleep() {
	led_sleep
	SLEEP_CHECK="1"
	echo mem > /sys/power/state 2>/dev/null
	return $?
}

wait_for_notifications() {
	secs=$WAKE_SECS
	is_led_on=0
	if [ "$SLEEP_CHECK" == "1" ]; then
		SLEEP_CHECK="0"
		sleep 1
		if [ "$(cat /sys/class/backlight/ae94000.dsi.0/bl_power)" == "0" ]; then
		echo 4 > /sys/class/backlight/ae94000.dsi.0/bl_power
		fi
	fi
	while [ $secs -ge 0 ]; do
		sleep 1
		if [ $is_led_on == 0 ]; then
			led_wake
			is_led_on=1
		else
			led_disable
			is_led_on=0
		fi

		if ! can_sleep; then
			SLEEP_SECS=$SLEEP_SECS_INIT
			break
		fi
		check_notifications
		secs=$(($secs-1))
	done
	led_disable
}

schedule_wake_time() {
	rtcwake -m no --date "+${SLEEP_SECS}s" 2>&1 >/dev/null
}

reset_wake_time() {
	led_wake
	> /sys/class/rtc/rtc0/wakealarm
}

can_sleep() {

if [ "$(cat /sys/class/backlight/ae94000.dsi.0/bl_power)" = "0" ] || ! sleepcharge || [ "$(su -c "export $DBUS && $INHIBIT --list --no-legend | grep -e '[[:space:]]sleep[[:space:]]' | grep -e 'lock$' | grep sleep" $USERNAME)" != "" ] || ! modem-check || [ "$(iw dev wlan0 info | grep 'type' | cut -d ' ' -f2)" == "AP" ]; then
	return 1
else
	return 0
fi

}

led_sleep() {
	if [ $IS_NOTIFICATION == 0 ]; then
		echo 511 > /sys/class/leds/rgb\:status/brightness
		echo "0 0 511" > /sys/class/leds/rgb\:status/multi_intensity
	else
		echo 511 > /sys/class/leds/rgb\:status/brightness
		echo "511 0 0" > /sys/class/leds/rgb\:status/multi_intensity
	fi
}

led_wake() {
	if [ $IS_NOTIFICATION == 0 ]; then
		echo 511 > /sys/class/leds/rgb\:status/brightness
		echo "0 511 0" > /sys/class/leds/rgb\:status/multi_intensity
	else
		echo 511 > /sys/class/leds/rgb\:status/brightness
		echo "511 0 0" > /sys/class/leds/rgb\:status/multi_intensity
	fi
}

led_disable() {
	echo 0 > /sys/class/leds/rgb\:status/brightness
	echo 0 > /sys/class/leds/rgb\:status/multi_intensity
}

notification_watcher() {
	su -c "screen -S sleepwalk-watcher -dm bash -c 'export $DBUS && dbus-monitor interface='org.freedesktop.Notifications' > \"$NOTIFICATION_FILE\"'" $USERNAME
}

check_notifications() {
	if cat "$NOTIFICATION_FILE" | grep "member=NotificationClosed" >/dev/null; then
		IS_NOTIFICATION=0
		> "$NOTIFICATION_FILE"
	elif cat "$NOTIFICATION_FILE" | grep "member=Notify" >/dev/null; then
		IS_NOTIFICATION=1
	else
		IS_NOTIFICATION=0
	fi
}


if [ $EUID -ne 0 ]; then
	echo "Needs root" >&2
	exit 1
fi

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	cat <<-EOF >&2
		Usage: sleepwalk [start/stop]
		Commands:
			 start		Start sleep cycle
			 stop		Stop sleep cycle
	EOF
	exit
fi

if [ "$1" == "start" ]; then
	if [ -d "$LOCK_DIR" ] || ! mkdir "$LOCK_DIR"; then
		echo "sleepwalk is already running - run 'sleepwalk stop' to stop it" >&2
		exit 1
	fi

	trap "kill $NOTIFICATION_WATCHER; $0 stop" EXIT
	touch "$NOTIFICATION_FILE"
	chmod 666 "$NOTIFICATION_FILE"
	sleep 60

	if [ "$(pidof dbus-daemon)" != "" ]; then
                DBUS="$(cat /proc/$(pidof -s dbus-daemon)/environ | tr '\0' '\n' | grep DBUS_SESSION_BUS_ADDRESS)"
        elif [ "$(pidof dbus-broker)" != "" ]; then
                DBUS="$(cat /proc/$(pidof -s dbus-broker)/environ | tr '\0' '\n' | grep DBUS_SESSION_BUS_ADDRESS)"
        else
                echo "Dbus process not found. Script not compatible for current distro. Aborting..." >&2
                exit 1
        fi

	if [ "$(command -v systemd-inhibit)" != "" ]; then
		INHIBIT="systemd-inhibit"

	elif [ "$(command -v elogind-inhibit)" != "" ]; then
		INHIBIT="elogind-inhibit"
	else
		echo "Unknown init system"
		exit 1
	fi

	notification_watcher
	sleep 2
	su -c "screen -S sleepwalk-notifier -dm bash -c 'export $DBUS && sleepwalk-notifier'" $USERNAME

	while [ -d "$LOCK_DIR" ]; do
		while ! can_sleep; do
			sleep 60
		done

		reset_wake_time
		schedule_wake_time

		check_notifications

		while ! start_deep_sleep; do
			reset_wake_time
			echo "Failed going to sleep, try again in $WAKE_SECS seconds ..." >&2
			wait_for_notifications
			schedule_wake_time
			if ! can_sleep; then
				break
			fi
		done

		if [ $((SLEEP_SECS + $SLEEP_STEP)) -lt $SLEEP_MAX_SECS ]; then
			SLEEP_SECS=$((SLEEP_SECS + SLEEP_STEP))
		else
			SLEEP_SECS=$SLEEP_MAX_SECS
		fi

		wait_for_notifications
	done
	kill $NOTIFICATION_WATCHER

elif [ "$1" == "stop" ]; then
	reset_wake_time
	led_disable
	rmdir "$LOCK_DIR" 2>/dev/null
	rm "$NOTIFICATION_FILE" 2>/dev/null
	su -c "screen -S sleepwalk-notifier -X quit" $USERNAME
	su -c "screen -S sleepwalk-watcher -X quit" $USERNAME
else
	echo "Unknown command: $1" >&2
	exit 1
fi
